#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

## @section Name parameters
## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: shardingsphere-proxy

## @section ShardingSphere operator parameters
operator:
  ## @param replicaCount operator replica count
  ##
  replicaCount: 1
  image:
    ## @param image.repository operator image name
    ##
    repository: "apache/shardingsphere-operator"
    ## @param image.pullPolicy image pull policy
    ##
    pullPolicy: IfNotPresent
    ## @param image.tag image tag
    ##
    tag: "0.2.0"
  ## @param imagePullSecrets image pull secret of private repository
  ## e.g:
  ## imagePullSecrets:
  ##   - name: mysecret
  ##
  imagePullSecrets: [ ]
  ## @param resources operator Resources required by the operator
  ## e.g:
  ## resources:
  ##   limits:
  ##     cpu: 2
  ##   limits:
  ##     cpu: 2
  ##
  resources: { }
  ## @param health.healthProbePort operator health check port
  ##
  health:
    healthProbePort: 8081
  ## @param metrics.metricsBindAddress operator metrics port
  ##
  metrics:
    metricsBindAddress: 8080
  ## @param featureGates.computeNode operator health check port
  ## @param featureGates.storageNode operator health check port
  ##
  featureGates:
    computeNode: false
    storageNode: false

  storageNodeProviders:
    aws:
      ## @param storageNodeProviders.aws.enabled Whether to enable aws storage node
      ## @param storageNodeProviders.aws.region aws region
      ## @param storageNodeProviders.aws.accessKeyId aws access key id
      ## @param storageNodeProviders.aws.secretAccessKey aws secret access key
      ##
      enabled: false
      region: ""
      accessKeyId: ""
      secretAccessKey: ""

## @section ShardingSphere-Proxy cluster parameters
proxyCluster:
  enabled: true
  ## @param replicaCount ShardingSphere-Proxy cluster starts the number of replicas, Note: After you enable automaticScaling, this parameter will no longer take effect
  ## @param proxyVersion ShardingSphere-Proxy cluster version
  ##
  replicaCount: "3"
  proxyVersion: "5.3.1"
  ## @param automaticScaling.enable ShardingSphere-Proxy Whether the ShardingSphere-Proxy cluster has auto-scaling enabled
  ## @param automaticScaling.scaleUpWindows ShardingSphere-Proxy automatically scales the stable window
  ## @param automaticScaling.scaleDownWindows ShardingSphere-Proxy automatically shrinks the stabilized window
  ## @param automaticScaling.target ShardingSphere-Proxy auto-scaling threshold, the value is a percentage, note: at this stage, only cpu is supported as a metric for scaling
  ## @param automaticScaling.maxInstance ShardingSphere-Proxy maximum number of scaled-out replicas
  ## @param automaticScaling.minInstance ShardingSphere-Proxy has a minimum number of boot replicas, and the shrinkage will not be less than this number of replicas
  ##
  automaticScaling:
    enable: false
    scaleUpWindows: 30
    scaleDownWindows: 30
    target: 20
    maxInstance: 4
    minInstance: 1
  ## @param resources ShardingSphere-Proxy starts the requirement resource, and after opening automaticScaling, the resource of the request multiplied by the percentage of target is used to trigger the scaling action
  ## e.g:
  ## resources:
  ##   limits:
  ##     cpu: 2
  ##     memory: 2Gi
  ##   requests:
  ##     cpu: 2
  ##     memory: 2Gi
  ##
  resources: { }
  ## @param service.type ShardingSphere-Proxy external exposure mode
  ## @param service.port ShardingSphere-Proxy exposes  port
  ##
  service:
    type: ClusterIP
    port: 3307
  ## @param startPort ShardingSphere-Proxy boot port
  ##
  startPort: 3307
  ## @param mySQLDriver.version ShardingSphere-Proxy The ShardingSphere-Proxy mysql driver version will not be downloaded if it is empty
  ##
  mySQLDriver:
    version: "5.1.47"
  ## @param imagePullSecrets ShardingSphere-Proxy pull private image repository key
  ## e.g:
  ## imagePullSecrets:
  ##   - name: mysecret
  ##
  imagePullSecrets: [ ]
  ## @section  ShardingSphere-Proxy ServerConfiguration parameters
  ## NOTE: If you use the sub-charts to deploy Zookeeper, the server-lists field must be "{{ printf \"%s-zookeeper.%s:2181\" .Release.Name .Release.Namespace }}",
  ## otherwise please fill in the correct zookeeper address
  ## The server.yaml is auto-generated based on this parameter.
  ## If it is empty, the server.yaml is also empty.
  ## ref: https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/mode/
  ## ref: https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/builtin-algorithm/metadata-repository/
  ##
  serverConfig:
    ## @section Compute-Node ShardingSphere-Proxy ServerConfiguration authority parameters
    ## NOTE: It is used to set up initial user to login compute node, and authority data of storage node.
    ## @param serverConfig.authority.privilege.type authority provider for storage node, the default value is ALL_PERMITTED
    ## @param serverConfig.authority.users[0].password Password for compute node.
    ## @param serverConfig.authority.users[0].user Username,authorized host for compute node. Format: <username>@<hostname> hostname is % or empty string means do not care about authorized host
    ##
    authority:
      privilege:
        type: ALL_PERMITTED
      users:
        - password: root
          user: root@%
    ## @section Compute-Node ShardingSphere-Proxy ServerConfiguration mode Configuration parameters
    ## @param serverConfig.mode.type Type of mode configuration. Now only support Cluster mode
    ## @param serverConfig.mode.repository.props.namespace Namespace of registry center
    ## @param serverConfig.mode.repository.props.server-lists Server lists of registry center
    ## @param serverConfig.mode.repository.props.maxRetries Max retries of client connection
    ## @param serverConfig.mode.repository.props.operationTimeoutMilliseconds Milliseconds of operation timeout
    ## @param serverConfig.mode.repository.props.retryIntervalMilliseconds Milliseconds of retry interval
    ## @param serverConfig.mode.repository.props.timeToLiveSeconds Seconds of ephemeral data live
    ## @param serverConfig.mode.repository.type Type of persist repository. Now only support ZooKeeper
    ## @param serverConfig.props.proxy-frontend-database-protocol-type Default startup protocol
    mode:
      repository:
        props:
          maxRetries: 3
          namespace: governance_ds
          operationTimeoutMilliseconds: 5000
          retryIntervalMilliseconds: 500
          server-lists: "{{ printf \"%s-zookeeper.%s:2181\" .Release.Name .Release.Namespace }}"
          timeToLiveSeconds: 600
        type: ZooKeeper
      type: Cluster
    props:
      proxy-frontend-database-protocol-type: MySQL
  ## @section ZooKeeper chart parameters

## ZooKeeper chart configuration
## https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
##
zookeeper:
  ## @param zookeeper.enabled Switch to enable or disable the ZooKeeper helm chart
  ##
  enabled: true
  ## @param zookeeper.replicaCount Number of ZooKeeper nodes
  ##
  replicaCount: 3
  ## ZooKeeper Persistence parameters
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
  ## @param zookeeper.persistence.enabled Enable persistence on ZooKeeper using PVC(s)
  ## @param zookeeper.persistence.storageClass Persistent Volume storage class
  ## @param zookeeper.persistence.accessModes Persistent Volume access modes
  ## @param zookeeper.persistence.size Persistent Volume size
  ##
  persistence:
    enabled: false
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi

## @section ComputeNode parameters
computeNode:
  ## @param computeNode.storageNodeConnector declare the driver for ShardingSphere Proxy
  ## @param computeNode.storageNodeConnector.type is the driver type for ShardingSphere Proxy
  ## @param computeNode.storageNodeConnector.version is the driver version for ShardingSphere Proxy
  ##
  storageNodeConnector:
    type: mysql
    version: 5.1.47
  ## @param computeNode.serverVersion the vesrion for ShardingSphere Proxy
  ##
  serverVersion: 5.3.1
  ## @param computeNode.replicas the replicas for ShardingSphere Proxy
  ##
  replicas: 1
  ## @param computeNode.portBindings the port binding
  ##
  portBindings:
    ## @param computeNode.portBindings[0].name the port binding
    ## @param computeNode.portBindings[0].containerPort the container port
    ## @param computeNode.portBindings[0].servicePort the service port
    ## @param computeNode.portBindings[0].protocol the protocol
    #
    - name: server
      containerPort: 3307
      servicePort: 3307
      protocol: TCP
  ## @param computeNode.serviceType the service type 
  ##
  serviceType: ClusterIP
  ## @param computeNode.bootstrap the configuration for bootstrapping
  ##
  bootstrap:
    ## @param computeNode.bootstrap.serverConfig the server.yaml
    ##
    serverConfig:
      ## @param computeNode.bootstrap.serverConfig.authority the authorization
      ##
      authority:
        ## @param computeNode.bootstrap.serverConfig.authority.privilege authorized privilege 
        ##
        privilege:
          ## @param computeNode.bootstrap.serverConfig.authority.privilege.type authorized privilege type 
          ##
          type: ALL_PERMITTED
        ## @param computeNode.users authorized users
        ## @param computeNode.users[0].user the username 
        ## @param computeNode.users[0].password the password 
        ##
        users:
          - user: root@%
            password: root
      ## @param computeNode.bootstrap.serverConfig.mode the modes for ShardingSphere
      ##
      mode:
        ## @param computeNode.bootstrap.serverConfig.mode.type the running mode for ShardingSphere
        ##
        type: Cluster
        ## @param computeNode.bootstrap.serverConfig.mode.repository the config for repository
        ##
        repository:
          ## @param computeNode.bootstrap.serverConfig.mode.repository.type the type for repository 
          ## e.g. 
          ## type: ZooKeeper
          ##
          type: ZooKeeper
          ## @param computeNode.bootstrap.serverConfig.mode.repository.props the modes for ShardingSphere
          ## e.g.
          ## timeToLiveSeconds: "600"
          ## server-lists: "{{ printf \"%s-zookeeper.%s:2181\" .Release.Name .Release.Namespace }}" 
          ## retryIntervalMilliseconds: "500"
          ## operationTimeoutMilliseconds: "5000"
          ## namespace: governance_ds
          ## maxRetries: "3"
          ##
          props:
            timeToLiveSeconds: "600"
            serverlists: zookeeper.default:2181
            retryIntervalMilliseconds: "500"
            operationTimeoutMilliseconds: "5000"
            namespace: governance_ds
            maxRetries: "3"
      ## @param computeNode.bootstrap.props the props for ShardingSphere
      ## e.g.
      ## proxy-frontend-database-protocol-type: MySQL
      ##
      props:
        proxyFrontendDatabaseProtocolType: MySQL

    ## @param computeNode.bootstrap.agentConfig the agent.yaml
    ##
    agentConfig:
      ## @param computeNode.bootstrap.agentConfig.plugins the plugins for agent
      ##
      plugins:
        ## metric plugin
        metrics:
          ## prometheus settings
          prometheus:
            ## host for prometheus
            ## e.g.
            ## host: "localhost"
            host: "localhost"
            ## port for prometheus
            ## e.g.
            ## port: 9090
            port: 9090
            props:
              jvmInformationCollectorEnabled: "true"
